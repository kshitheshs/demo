
1.

I have submitted this part as django project with rest api views. 




2.
Installing webpack 

npm init
npm i webpack webpack-dev-server webpack-cli --save--dev


Adding a webpack.config.js file in the root of our application structure. Add the following code in your webpack.config file.


const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');

module.exports = {
  //This property defines where the application starts
  entry:'./src/index.js',
    
  //This property defines the file path and the file name which will be used for deploying the bundled file
  output:{
    path: path.join(__dirname, '/dist'),
    filename: 'bundle.js'
  },
    
  //Setup loaders
  module: {
    rules: [
      {
        test: /\.js$/, 
        exclude: /node_modules/,
        use: {
          loader: 'babel-loader'
        }
      }
    ]
  },
    
  // Setup plugin to use a HTML file for serving bundled js files
  plugins: [
    new HtmlWebpackPlugin({
      template: './src/index.html'
    })
  ]}




3. 

First we need to backup postgres database, store it in aws S3. We will use cronjob to schedule backup and storing in S3 at 2am everyday.

FIrst we create a script folder. And create backup, 
cd ~
mkdir scripts
cd scripts
nano db_backup.sh

-Writing the script below to it

#!/bin/bash
DIR=`date +%d-%m-%y`
DEST=~/db_backups/$DIR
mkdir $DEST

PGPASSWORD='postgres_password' pg_dump --inserts --column-inserts --username=postgres_user --host=postgres_host --port=postgres_port postgres_database_name > dbbackup.sql

chmod the script to allow it to for execution
chmod +x ~/scripts/db_backup.sh


Script to sync with S3

nano db_sync.sh

Write this to script:

#!/bin/bash
/usr/local/bin/aws s3 sync ~/db_backups s3://my-bucket-name

For execution:
chmod +x ~/scripts/db_sync.sh

For S3 database dumps
cd ~
mkdir db_backups
I am using AWS CLI 
pip install awscli

cd ~
mkdir .aws
nano ~/.aws/config

aws_access_key_id=AKIAIOSFODNN7EXAMPLE
aws_secret_access_key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY


Lastly we use cron to automate the process

crontab -e


0 0 * * * ~/scripts/db_backup.sh # take a backup every midnight or any suitable time.
0 2 * * * ~/scripts/db_sync.sh # upload the backup at 2am



